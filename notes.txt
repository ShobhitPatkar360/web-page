ERROR
1. this.stack.push(layer) => write const router=express.Router(); instead of const router=express.Router;
2. const connectDatabase=require("./database/database"); mei connectDatabase halke dikh raha tha => write  connectDatabase()
3. body is undefined => write app.use(express.json()); in app.js before require the productRoutes


part 4 errors
201 ok to insert the data, register new user successful
200 ok to display the data, existing user successful
404 client side error data not found
400 client slide error bad request

part 5 error handeling
    1. Error handler middleware runs only after app.use() due to routing purpose
    2. TypeError: err.status is not a function, arre pagle err nhi res.status hota hay
    3. Writing /product after api in app.js (aware about future errors)
    4. Uncaught exceptions => When TypeError is found then server is crashed, we just want want to switch off the server when this error is found
        hence to achieve the such purpose we use process.on("uncaughtException")
    5. Forcefully Shutting down the server process.exit(1)

    6. Similarly process.on("unhandledRejection")

part 6 password encription and authentication
    1. Functions used in password encription
        a. userSchema.pre("save",async function(next){
                if(!this.isModified("password")) {
                    next();
                } 
                this.password=await bcrypt.hash(this.password,10);
            })

        b. Checking the password
            const isPasswordCorrect=await user.comparePassword(password);

    2. Functions used for authentication
        a. Token creation function
            userSchema.methods.getJWTToken=function(){
                return jwt.sign({id:this._id},process.env.JWT_SECRET_KEY,{
                 expiresIn:process.env.JWT_EXPIRES
                 })
                }

        b. Calling function to generate Token
            const token=user.getJWTToken();
        c. return token
            res.status(201).json({
            success:true,
            token

        d. token verification

    3. Cookie expiration convention
        n sec = n* 1000
        n min = n* 60 * 1000
        n hour = n * 60 * 60 * 1000
        n days = n * 24 * 60 * 60 * 1000
        n weeks = n * 7 * 24 * 60 * 60 * 1000
    4. Promise and response from database is almost same thing

QUESTIONS FROM PART 6   
    1. Why do we make password select:false => when we use findById(<some constant>.id) then reply comes form database which should not include password

Errors in part 6

    1. Token is not coming as object from api => use cookie-parser on in app.js() and use as app.use(cookieparser());
    2. 